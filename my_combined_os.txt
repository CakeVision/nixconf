Combined Nix Files from: .
Generated on: my_combined_os.txt

================================================================================
FILE: flake.nix
--------------------------------------------------------------------------------
{
  description = ''
    For questions just DM me on X: https://twitter.com/@m3tam3re
    There is also some NIXOS content on my YT channel: https://www.youtube.com/@m3tam3re

    One of the best ways to learn NIXOS is to read other peoples configurations. I have personally learned a lot from Gabriel Fontes configs:
    https://github.com/Misterio77/nix-starter-configs
    https://github.com/Misterio77/nix-config

    Please also check out the starter configs mentioned above.
  '';

  inputs = {
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  };

  outputs = { self, home-manager, nixpkgs, ... }@inputs:
    let
      inherit (self) outputs;
      systems = [
        "aarch64-linux"
        "i686-linux"
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
      ];
      forAllSystems = nixpkgs.lib.genAttrs systems;
    in
    {
      packages =
        forAllSystems (system: import ./pkgs nixpkgs.legacyPackages.${system});
      overlays = import ./overlays { inherit inputs; };
      nixosConfigurations = {
        lynx = nixpkgs.lib.nixosSystem {
          specialArgs = { inherit inputs outputs; };
          modules = [ ./hosts/lynx ];
        };
      };
      homeConfigurations = {
        "cake@lynx" = home-manager.lib.homeManagerConfiguration {
          pkgs = nixpkgs.legacyPackages."x86_64-linux";
          extraSpecialArgs = { inherit inputs outputs; };
          modules = [ ./home/cake/home.nix ];
        };
      };
    };

}


================================================================================
FILE: home/cake/lynx.nix
--------------------------------------------------------------------------------
{ config, ... }: { imports = [ ./home.nix ../common ]; }


================================================================================
FILE: home/cake/home.nix
--------------------------------------------------------------------------------
# This is a default home.nix generated by the follwing hone-manager command
# 
# home-manager init ./

{ config, lib, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = lib.mkDefault "cake";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "24.05"; # Please read the comment before changing.

  fonts.fontconfig.enable = true;
  # The home.packages option allows you to install Nix packages into your
  # environment.

  home.packages = with pkgs;
    [
      #  python311Packages.pybind11
      #  python311Packages.cppy
      #  libgcc
      #  findutils
      jetbrains.clion
      jetbrains.pycharm-professional
      #xorg.libX11
      ripgrep
      cargo
      zoxide
      cmake # cmake
      zsh # zsh
      oh-my-posh
      bat # bat
      ninja # ninja
      brave
      nerdfonts
      vscode
      haproxy
      neovim

      #android-tools
      # # Adds the 'hello' command to your environment. It prints a friendly
      # # "Hello, world!" when run.
      # pkgs.hello

      # # It is sometimes useful to fine-tune packages, for example, by applying
      # # overrides. You can do that directly here, just don't forget the
      # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
      # # fonts?
      #(pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

      # # You can also create simple shell scripts directly inside your
      # # configuration. For example, this adds a command 'my-hello' to your
      # # environment:
      # (pkgs.writeShellScriptBin "my-hello" ''
      #   echo "Hello, ${config.home.username}!"
      # '')
    ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/m3tam3re/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}


================================================================================
FILE: home/common/default.nix
--------------------------------------------------------------------------------
{ config, lib, outputs, pkgs, ... }: {
  nixpkgs = {
    # You can add overlays here
    overlays = [
      # Add overlays your own flake exports (from overlays and pkgs dir):
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.stable-packages

      # You can also add overlays exported from other flakes:
      # neovim-nightly-overlay.overlays.default

      # Or define it inline, for example:
      # (final: prev: {
      #   hi = final.hello.overrideAttrs (oldAttrs: {
      #     patches = [ ./change-hello-to-hi.patch ];
      #   });
      # })
    ];
    # Configure your nixpkgs instance
    config = {
      # Disable if you don't want unfree packages
      allowUnfree = true;
      # Workaround for https://github.com/nix-community/home-manager/issues/2942
      allowUnfreePredicate = _: true;
    };
  };

  nix = {
    package = lib.mkDefault pkgs.nix;
    settings = {
      experimental-features = [ "nix-command" "flakes"  ];
      warn-dirty = false;
    };
  };
}


================================================================================
FILE: overlays/default.nix
--------------------------------------------------------------------------------
{ inputs, ... }: {
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../pkgs { pkgs = final; };

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev:
    {
      # example = prev.example.overrideAttrs (oldAttrs: rec {
      # ...
      # });
    };

  stable-packages = final: _prev: {
    stable = import inputs.nixpkgs-stable {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}


================================================================================
FILE: hosts/common/default.nix
--------------------------------------------------------------------------------
# Common configuration for all hosts

{ lib, inputs, outputs, ... }: {
  imports = [
    ./users
    inputs.home-manager.nixosModules.home-manager
  ];
  home-manager = {
    useUserPackages = true;
    extraSpecialArgs = { inherit inputs outputs; };
  };

  nixpkgs = {
    # You can add overlays here
    overlays = [
      # Add overlays your own flake exports (from overlays and pkgs dir):
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.stable-packages

      # You can also add overlays exported from other flakes:
      # neovim-nightly-overlay.overlays.default

      # Or define it inline, for example:
      # (final: prev: {
      #   hi = final.hello.overrideAttrs (oldAttrs: {
      #     patches = [ ./change-hello-to-hi.patch ];
      #   });
      # })
    ];
    # Configure your nixpkgs instance
    config = {
      # Disable if you don't want unfree packages
      allowUnfree = true;
    };
  };

  nix = {
    settings = {
      experimental-features = "nix-command flakes";
      trusted-users = [
        "root"
        "your-user"
      ]; # Set users that are allowed to use the flake command
    };
    gc = {
      automatic = true;
      options = "--delete-older-than 30d";
    };
    optimise.automatic = true;
    registry = (lib.mapAttrs (_: flake: { inherit flake; }))
      ((lib.filterAttrs (_: lib.isType "flake")) inputs);
    nixPath = [ "/etc/nix/path" ];
  };
}


================================================================================
FILE: hosts/common/users/cake.nix
--------------------------------------------------------------------------------
{ config
, pkgs
, inputs
, ...
}: {

  users.users = {
    cake = {
      initialHashedPassword = "$y$j9T$nRmY0nQ9pqV2GTeVcyA1p.$l55heBZdk97.fXLLjxemXM9qn9zECUmJyP81mgwaG.7";
      isNormalUser = true;
      description = "Cake";
      extraGroups = [
        "wheel"
        "networkmanager"
        "audio"
        "video"
        "input"
        "plugdev"
        "flatpak"
      ];
      packages = [
        inputs.home-manager.packages.${pkgs.system}.default
      ];

    };

  };

  home-manager.users.cake =
    #   import cake/${config.networking.hostName}.nix;
    import cake/lynx.nix;
  # home-manager.users.haproxy
}


================================================================================
FILE: hosts/common/users/default.nix
--------------------------------------------------------------------------------
{
  imports = [ ./cake.nix ];
}


================================================================================
FILE: hosts/lynx/configuration.nix
--------------------------------------------------------------------------------
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [
      # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  #_# networking.hostName = "nixos"; # Define your hostname.

  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Bucharest";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "ro_RO.UTF-8";
    LC_IDENTIFICATION = "ro_RO.UTF-8";
    LC_MEASUREMENT = "ro_RO.UTF-8";
    LC_MONETARY = "ro_RO.UTF-8";
    LC_NAME = "ro_RO.UTF-8";
    LC_NUMERIC = "ro_RO.UTF-8";
    LC_PAPER = "ro_RO.UTF-8";
    LC_TELEPHONE = "ro_RO.UTF-8";
    LC_TIME = "ro_RO.UTF-8";
  };

  # Enable the X11 windowing system.
  # You can disable this if you're only using the Wayland session.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.displayManager.sddm.enable = true;
  services.desktopManager.plasma6.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  # COMMENTED OUT FOR CONFLICT WITH HOME-MANAGER
  #users.users.cake = {
  #  isNormalUser = true;
  #  description = "Cake";
  #  extraGroups = [ "networkmanager" "wheel" ];
  #  packages = with pkgs; [
  #    kdePackages.kate
  #    #  thunderbird
  #  ];
  #};
  # define extraGroups
  users.extraGroups = {
    haproxy = {
      gid = 1001;
    };
  };
  #define extraUsers
  users.extraUsers.haproxy = {
    isSystemUser = true;
    uid = 1001;
    group = "haproxy";
    extraGroups = [ "networkmanager" ];
    shell = "/bin/false";
  };

  hardware.bluetooth.enable = true; # enables support for Bluetooth
  hardware.bluetooth.powerOnBoot = true; # powers up the default Bluetooth controller on boot

  programs.nix-ld.enable = true;
  programs.nix-ld.libraries = with pkgs; [
    # Add any missing dynamic libraries for unpackaged programs
    # here, NOT in environment.systemPackages
  ];
  # Install firefox.
  programs.firefox.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # thought about adding haproxy as a service, but the need to define the config in the system build is 
  # not fit for development usage, only for deployment
  #
  # add haproxy to the ssystem
  # services.haproxy =
  #   {
  #     enable = true;
  #     user = "haproxy";
  #     group = "haproxy";
  #     config = ''
  #              # Global settings
  #       global
  #           log /dev/log local0
  #           log /dev/log local1 notice
  #           maxconn 2000
  #           daemon
  #           stats socket /run/haproxy/admin.sock mode 660 level admin
  #           stats timeout 30s

  #       # Default settings
  #       defaults
  #           log global
  #           mode http
  #           option httplog
  #           option dontlognull
  #           timeout connect 5000ms
  #           timeout client  50000ms
  #           timeout server  50000ms
  #           maxconn 2000

  #       # Frontend configuration (listens on port 25000)
  #       frontend echo_frontend
  #           bind *:25000
  #           default_backend echo_backend

  #       # Backend configuration (round-robin to Go echo servers)
  #       backend echo_backend
  #           balance roundrobin
  #           option httpchk GET /
  #           server echo1 127.0.0.1:1323 check
  #           server echo2 127.0.0.1:1324 check
  #           server echo3 127.0.0.1:1325 check

  #     '';
  #   };
  # Add tmux system-wide
  programs.tmux = {
    enable = true;
    keyMode = "vi";
    shortcut = "C-Space";
    # keyMode = vi sets this settings in the tmux.conf
    #   bind h select-pane -L
    #   bind j select-pane -D 
    #   bind k select-pane -U
    #   bind l select-pane -R
    #
    # defaultShortcut = "C-Space";
    # unbind C-b
    # set -g prefix C-Space
    # bind C-Space send-prefix


    extraConfigBeforePlugins = '' 

      set-option -g default-command "/run/current-system/sw/bin/bash"
      set-option -sa terminal-overrides ",xterm*:Tc"
      set -g mouse on


      set -g base-index 1
      set -g pane-base-index 1
      set-window-option -g pane-base-index 1
      set-option -g renumber-windows on
      
      bind | split-window -h 
      bind v split-window -v
      '';
    plugins = with pkgs.tmuxPlugins;
      [
        yank
        catppuccin
        vim-tmux-navigator

      ];


  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim
    git
    wget
    home-manager
  ];


  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:
  services.blueman.enable = true;
  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.05"; # Did you read the comment?

}


================================================================================
FILE: hosts/lynx/hardware-configuration.nix
--------------------------------------------------------------------------------
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/0005ab6f-ea91-426a-baaa-44deade7b26f";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/6141-A3F8";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


================================================================================
FILE: hosts/lynx/default.nix
--------------------------------------------------------------------------------
# A staring point is the basic NIXOS configuration generated by the ISO installer.
# On an existing NIXOS install you can use the following command in your flakes basedir:
# sudo nixos-generate-config --dir ./hosts/your-host
# 
# Please make sure to change the first couple of lines in your configuration.nix:

# { config, inputs, ouputs, lib, pkgs, ... }:
#
# {
#   imports = [ # Include the results of the hardware scan.
#     ./hardware-configuration.nix
#     inputs.home-manager.nixosModules.home-manager
#   ];
#   ...
#
# Moreover please update the packages option in your user configuration and add the home-manager options:

# users.users = {
#   your-name = {
#     isNormalUser = true;
#     initialPassword = "12345";
#     extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
#     packages = [ inputs.home-manager.packages.${pkgs.system}.default ];
#   };
# };
#
# home-manager = {
#   useUserPackages = true;
#   extraSpecialArgs = { inherit inputs outputs; };
#   users.your-name =
#     import ../../home/your-name/${config.networking.hostName}.nix;
# };
#
# Please also change your hostname accordingly:
#:w

# networking.hostName = "nixos"; # Define your hostname.

{
  imports = [../common ./configuration.nix ];
}


================================================================================
FILE: pkgs/default.nix
--------------------------------------------------------------------------------
{ pkgs, ... }:
{
  # Define your custom packages here
  #  my-package = pkgs.callPackage ./my-package {};
}


================================================================================
FILE: pkgs/my-package/default.nix
--------------------------------------------------------------------------------
# Your custom nix-package
# ...

